using UnityEngine;
using System.Collections;

public class scoreScript : MonoBehaviour {

	public Variables vars;

	public GUIText guiText;



	private int currentScore;
	private int scoreMultiplier;
	private int scoreCount;
	private int multiCount;
	private int playerLives;

	// Use this for initialization
	void Start () {

		//vars.currentScore = 0;


		//Variables
		GameObject v1 = GameObject.FindGameObjectWithTag ("Variables");
		vars = v1.GetComponent<Variables> ();



		scoreCount = vars.scoreCount;
		multiCount = vars.multiCount;
		scoreMultiplier = vars.scoreMultiplier;
		playerLives = vars.playerLives;
	}

	//WHEN OBJECT HITS PLAYER
	void OnTriggerEnter2D (Collider2D obj)  {
		
		multiCount = vars.multiCount;
		scoreMultiplier = vars.scoreMultiplier;
		
		string name = obj.gameObject.tag;

	//square
		if (name == "Shape01") {

			UpdateScore(1,10,multiCount,scoreMultiplier);


			
		}
		//circle
		if (name == "Shape02") {
			
			UpdateScore(1,10,multiCount,scoreMultiplier);

			
			
		}
		//triangle
		if (name == "Shape03") {
			
			UpdateScore(1,10,multiCount,scoreMultiplier);

			
			
		}
		//diamond
		if (name == "Shape04") {
			
			UpdateScore(1,25,multiCount,scoreMultiplier);

			
			
		}
		//star
		if (name == "Shape05") {
			
			UpdateScore(1,50,multiCount,scoreMultiplier);

			
			
		}
		//BONUS
		if (name == "Shape00") {

			UpdateScore(-1,0,multiCount,scoreMultiplier);

			
		}
		//Lives
		if (name == "Shape06") {
			
			UpdateScore(0,0,multiCount,scoreMultiplier);
			//UpdateUIScore();
			
		}
	}


	void UpdateScore(int scoreType, int scoreValue, int multiCount, int multi) {

		//For hitting shape
		if (scoreType ==1) {

			//multiplier count that will reset when shape is missed.
			multiCount++;
			
			//Count total shapes collected
			vars.scoreCount++;
			//CalculateMultiplier(vars.multiCount, vars.scoreMultiplier);

			vars.currentScore+= scoreValue * CalculateMultiplier(multiCount, multi);

			if (vars.powerCount > 0){
			vars.powerCount--;
			}
		}

		//Bonus shape, increase multiplier
		if (scoreType == -1) {
			vars.powerCount += 3;

			vars.scoreMultiplier += 3;

		}

		//Add a life
		if (scoreType == 0) {
		
			vars.playerLives++;
		
		}
	
	}



	int CalculateMultiplier(int count, int multi){

		int updatedMulti;
		int potentialMulti;
	
		//Determines how many shapes it takes in a row to get a multiplier.
		potentialMulti = Mathf.RoundToInt((count + 10)/10);

		//If multiplier is above 10, reduce it by 1 (previously vars.scoreMultiplier--)
		if (multi > 10) {
			updatedMulti = multi - 1;
			vars.scoreMultiplier = updatedMulti;
			
			} 
			//If the calculated multiplier is greater than current multiplier but less than 10, update the multiplier to new.
		else if (potentialMulti > multi && multi < 10)
			{
				updatedMulti = Mathf.Clamp (potentialMulti,0,10);
				vars.scoreMultiplier = updatedMulti;
			}
		
			vars.multiCount = count;
			
		return updatedMulti;	

	}
}
