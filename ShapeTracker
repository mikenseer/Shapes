using UnityEngine;
using System.Collections;

public class ShapeTracker : MonoBehaviour {
	
	
	public int[] cargoBay;
	public int cargoBaySize = 5;
	
	private Variables vars;
	
	public Timer timer;
	public Button button;
	
	// Use this for initialization
	void Start () {
		//button.gameObject.SetActive (false);
		GameObject v1 = GameObject.FindGameObjectWithTag ("Variables");
		vars = v1.GetComponent<Variables> ();

		cargoBay  = new int [cargoBaySize];
		
	}
	
	
	
	//When shape hits player.
	void OnTriggerEnter2D (Collider2D obj)  {
		
		string name = obj.gameObject.tag;
		
		//square
		if (name == "Shape01") {			
			CargoBay(1);
		}
		//circle
		if (name == "Shape02") {			
			CargoBay(2);
		}
		//triangle
		if (name == "Shape03") {			
			CargoBay(3);
		}
		//diamond
		if (name == "Shape04") {			
			CargoBay(4);
		}
		//star
		if (name == "Shape05") {			
			CargoBay(5);
		}
		//blood cell
		//if (name == "Shape00") {			
		//		CargoBay(-1);	
		//}


		CheckForThree();
		ActiveButton();
		
		
		
		
	}
	
	void CargoBay(int shapeNum){
		
		//First in First out loop to track the shapes in cargoBay.
		for ( int i = 0; i < cargoBaySize; i++)
		{
			if (cargoBay[i] == 0){
				cargoBay[i] = shapeNum;
				//Debug.Log(cargoBay[i] + " Added");
				Debug.Log(cargoBay[0] + " " +cargoBay[1] +" " +cargoBay[2] +" " +cargoBay[3] +" " +cargoBay[4] );
				break;
			}

			//If cargoBay is full, remove oldest [May only let this happen when screen is being touched.]
			else if (cargoBay[cargoBaySize - 1] != 0)
			{


				for ( int n = 0; n < cargoBaySize; n++)
				{
					//move over the left most shapes, and remove the oldest
					if (n <  (cargoBaySize - 1)  ){

						if (n == 0 ){
							//Adds the oldest shapes's value to infection.  Making overflowing a bad move!
							vars.winningScore += cargoBay[0];
						}

						cargoBay[n] = cargoBay[n+1];

						//Debug.Log (cargoBay[n] + "replaced with " + cargoBay[n+1]);
						//Debug.Log(cargoBay[0] + " " +cargoBay[1] +" " +cargoBay[2] +" " +cargoBay[3] +" " +cargoBay[4] );

					}
					//The newest shape fills in
					else {
						cargoBay[cargoBaySize - 1] = shapeNum;

						Debug.Log(cargoBay[0] + " " +cargoBay[1] +" " +cargoBay[2] +" " +cargoBay[3] +" " +cargoBay[4] );
						break;
					}
					
				}
				break;
			}
		}
		

		
	}
	
	public void CheckForThree(){
	
	int shapeCode;
	
	// Check if 3 of same shape are touching
		for (int i = 0; i < cargoBaySize; i++) {
			
			//Checks if shape exists
			if (cargoBay[i] != 0){
				//Sets shapeCode to the current shape in the bay. [unless its a bloodcell]
				if (cargoBay[i] != -1){
					shapeCode = cargoBay[i];				
					//Checks if next slot has same shape
					if (shapeCode == cargoBay[i+1]){
						//Checks if third slot has same shape
						if (shapeCode == cargoBay[i+2]){
							//Clears the 3 shapes, gives points.
							cargoBay[i] = 0;
							cargoBay[i+1] = 0;
							cargoBay[i+2] = 0;
							
							//Bonus score fir 3x match
							vars.currentScore += shapeCode * 3 + 2;
							
							//slide remaining cargo to the left.
							if (cargoBay[i+3] != 0){
								SlideLeft(i);
							}
						
						}
						
					}
				}
			}
		
		}
	}
	
	//Slides remaining shapes left
	void SlideLeft(int loc)
	{
		//when left 3 match, slide right 2 shapes over
		if (loc == 0){
			cargoBay[loc] = cargoBay[loc+3];
			cargoBay[loc+3] = 0;
			cargoBay[loc + 1] = cargoBay[loc+4];
			cargoBay[loc+4] = 0;
		}
		//when middle 3 match slide right shape over
		if (loc == 1){
			cargoBay[loc] = cargoBay[loc+3];
			cargoBay[loc+3] = 0;
		}
		
	}
	
	//Activate the button when cargo bay is full
	void ActiveButton(){
		int count = cargoBaySize;
		//CargoBay is full
		for ( int i = 0; i < cargoBaySize; i++)
		{
			if (cargoBay[i] != 0){
				count--;
			}
		}

		if (count == 0) {
			button.gameObject.SetActive	(true);
				}
		
		
	}
}
