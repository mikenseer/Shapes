using UnityEngine;
using System.Collections;

public class Variables : MonoBehaviour {

	public GUIText guiText;

	public int pooledAmountV = 10;
	public float fallSpeedV = -4f;
	public float spawnTimeV = .3f;
	//public float removeTimeV = 3f;

	public float maxSpeed = -10f;
	public float minSpeed = -3f;
	public float boostSpeed = 2f;

	public int scoreCount;
	public int multiCount;
	public int scoreMultiplier = 1;
	public int topMultiplier;
	public int highestMultiplier;

	public int playerLives = 3;

	public int previousScore;
	public int currentScore;
	public int powerCount = 0;
	public int shapesLetPast = 0;

	public int shape01Chance = 30;
	public int shape02Chance = 30;
	public int shape03Chance = 30;
	public int shape04Chance = 7;
	public int shape05Chance = 2;
	public int shape00Chance = 1;
	public int shape06Chance = 0;
	public int shape07Chance = 0;

	public bool isContinuation = false;

	public int activeShapes;

	public string gameState = "FLOW";

	public string[] achievementStrings;
	public string achievementBools;

	public bool gameOver = false;

	void Start(){

		LoadScore ();
	
	}

	void Update()
	{
		ShapeSpeed (scoreMultiplier);
		UpdateUIScore ();

		if (gameOver == true) {
		
			GameOver();
		
		}
		if (topMultiplier < scoreMultiplier) {
			topMultiplier = scoreMultiplier;		
		}

	}

	void UpdateUIScore(){
		
		guiText.text = gameState+"\n Score: " + currentScore +
			" Best: " + previousScore + 
				" \n " + scoreMultiplier + "x Game: " + topMultiplier + "x Best: " + highestMultiplier + "x \n Count: " + scoreCount;
		
	}

	void ShapeSpeed (int multiplier){
		//float aFloat;
		if (multiplier <= 10){
			//aFloat = (maxSpeed * (.1f * multiplier));
			fallSpeedV = Mathf.Clamp((maxSpeed * (.2f * multiplier)),-10.5f, -3f);
			spawnTimeV = Mathf.Clamp((2f/multiplier),.3f,1f);
			DetermineShapeSpawning (multiplier);
		}
		
		else{
			fallSpeedV = maxSpeed - boostSpeed;
			//fallSpeedV = -((boostSpeed * multiplier) + multiplier);
			DetermineShapeSpawning (multiplier);;
		}

	
		}

	void DetermineShapeSpawning(int multiplier){

		if (multiplier == 1) {
		

				shape01Chance = 50;
				shape02Chance = 50;
				shape03Chance = 0;
				shape04Chance = 0;
				shape05Chance = 0;
				shape00Chance = 0;
				shape06Chance = 0;

				//spawnTimeV = .8f;

		
		}

		else if (multiplier == 2) {

				shape01Chance = 50;
				shape02Chance = 50;
				shape03Chance = 0;
				shape04Chance = 0;
				shape05Chance = 0;
				shape00Chance = 0;
				shape06Chance = 0;

				//spawnTimeV = .6f;

			
		}
		
		else if (multiplier >= 3 && multiplier < 5) {
			

				shape01Chance = 31;
				shape02Chance = 31;
				shape03Chance = 31;
				shape04Chance = 5;
				shape05Chance = 0;
				shape00Chance = 2;
				shape06Chance = 0;
				//shape07Chance = 15;

				//spawnTimeV = .5f;

			
		}
		
		else if (multiplier >= 5 && multiplier < 10) {
			

				shape01Chance = 25;
				shape02Chance = 25;
				shape03Chance = 25;
				shape04Chance = 17;
				shape05Chance = 5;
				shape00Chance = 3;
				shape06Chance = 0;
				//shape07Chance = 0;

				//spawnTimeV = .4f;

			
		}
		
		else if (multiplier == 10) {
			

				shape01Chance = 20;
				shape02Chance = 20;
				shape03Chance = 20;
				shape04Chance = 20;
				shape05Chance = 15;
				shape00Chance = 5;
				shape06Chance = 0;
				//shape07Chance = 0;
				//spawnTimeV = .3f;

			
		}
		else if (multiplier > 10) {

				shape01Chance = 0;
				shape02Chance = 0;
				shape03Chance = 0;
				shape04Chance = 35;
				shape05Chance = 45;
				shape00Chance = 20;
				shape06Chance = 0;
				//shape07Chance = 5;

				//spawnTimeV = .2f;
		}
	}

	void GameOver(){
		highestMultiplier = topMultiplier;
		SaveScore ();
		gameState = "Game Over";
		//gameOver = true;
		//Debug.Log ("GAME OVER Score: " + currentScore + "Best: " + previousScore+ "/n TopMulti: " +topMultiplier + " HighMulti: "+highestMultiplier);
		Achievements ();
		Time.timeScale = 0;
	
	}

	void SaveScore() {
		if (PlayerPrefs.HasKey("Highscore")) {
			if (PlayerPrefs.GetInt("Highscore") < currentScore) {
				PlayerPrefs.SetInt("Highscore", currentScore);
				previousScore = currentScore;
			}
		} else {
			PlayerPrefs.SetInt("Highscore", currentScore);

		}

		SaveMulti ();

		//Achievements
		if (PlayerPrefs.HasKey("Achievements")) {
			if (PlayerPrefs.GetString("Achievements") != achievementBools) {
				PlayerPrefs.SetString("Achievements", achievementBools);

			}
		} else {
			PlayerPrefs.SetString("Achievements", achievementBools);
			
		}

		PlayerPrefs.Save();
	}

	void SaveMulti(){
		if (PlayerPrefs.HasKey("HighMulti")) {
			if (PlayerPrefs.GetInt("HighMulti") < highestMultiplier) {
				PlayerPrefs.SetInt("HighMulti", highestMultiplier);
			}
		} else {
			PlayerPrefs.SetInt("HighMulti", highestMultiplier);
		}
	
	}
	
	void LoadScore() {
		if (PlayerPrefs.HasKey("Highscore")) {
			previousScore = PlayerPrefs.GetInt("Highscore");
		}
		if (PlayerPrefs.HasKey("HighMulti")) {
			highestMultiplier = PlayerPrefs.GetInt("HighMulti");
			Debug.Log(PlayerPrefs.GetInt("HighMulti"));
		}

		if (PlayerPrefs.HasKey("Achievements")) {
			achievementBools = PlayerPrefs.GetString("Achievements");
		}
	}

	void Achievements(){
	
		if (achievementStrings.Length < 1) {
						//Debug.Log ("No achievements yet");
				} 
		else {
			//Debug.Log("Achievements:");
	
			//ACHIEVMENTS
						//1 million
			if (achievementStrings [1].Length < 1) {

								

								if (previousScore >= 1000) {
		
										//Debug.Log ("Achievement added: Your first grand!");

								}
						}
				}

		AchievementParse ();

	}
	void AchievementParse(){

		for (int i = 0; i < achievementStrings.Length; i++) {

			if (achievementStrings[i].Length > 0){

				achievementBools = achievementBools + "1";

			}
			else if (achievementStrings[i].Length < 1){

				achievementBools = achievementBools + "0";

			}

				}

	}

}
