using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class ShapeSpawn : MonoBehaviour {
	
	private Variables vars;
	
	//spawnTime may be changed into multiple floats for the InvokeRepeating command
	private float spawnTime;
	public GameObject shapeObject;
	
	//The spawn locations
	public Transform spawn01,spawn02,spawn03,spawn04,spawn05,spawn06;
	private int spawnNumber;
	
	//tota number of shapes
	private int pooledAmount;
	
	[SerializeField]
	List<GameObject> shapesQueue= new List<GameObject>();
	
	private int activeShapes = 0;
	
	//May need to change this to Update() in order to allow variable changing mid game.
	void Start () {
		
		//Variables
		GameObject v1 = GameObject.FindGameObjectWithTag ("Variables");
		vars = v1.GetComponent<Variables> ();
		
		
		spawnTime = vars.spawnTimeV;
		pooledAmount = vars.pooledAmountV;
		
		//The Shapes queue pool	
		
		//shapesQueue = new List<GameObject>();
		ShapeObjectPool (vars.pooledAmountV);
		
		
		//InvokeSpawn ();
		//Invoke ("InvokeSpawn", .2f);
	}
	
	void Update(){
		//If spawntime changes, re-evaluate before next spawn wave
		
		if (spawnTime != vars.spawnTimeV) {
			
			CancelInvoke("Spawn");
			
			//Wait for no more active shapes on screen
			StartCoroutine(DelaySpawn());
		}
		
	}
	private	bool truTH = false;
	IEnumerator DelaySpawn() {

	
		
		for (int i = 0; i < 6; i++)
		{
		THING:;
			if (vars.activeShapes >= 0)
			{
				Debug.Log(vars.activeShapes + " COUNT");
				yield return new WaitForSeconds(.01f);
				if (vars.activeShapes > 0)
				{
					goto THING;
				}
				else{
				truTH = true;
				}


			}
			if (truTH){
				//if (vars.activeShapes == 0)
				//{
					truTH = false;
					Debug.Log(vars.activeShapes + " COUNT WORKS");
					//set new spawn time
					spawnTime = vars.spawnTimeV;
					InvokeSpawn();
					
					break;
				//}

			}
			else if (vars.activeShapes == 0)
			{
			Debug.Log(vars.activeShapes + " COUNT");
			InvokeSpawn();
			break;
			}
			
			
		}
		
	}
	
	//keeps count of active objects.
	//private int CountActive()
	//{
	//	for (int i = 0; i < shapesQueue.Count; i++)
	//	{
	//		if (shapesQueue[i].activeInHierarchy == true)
	//		{
	//			activeShapes += 1;
	
	
	//		}
	
	//else{
	//	activeShapes--;
	//}
	
	//	}
	//	return activeShapes;
	
	//}
	
	void ShapeObjectPool(int pool){
		
		for (int i = 0; i < vars.pooledAmountV; i++) {
			
			GameObject obj = (GameObject)Instantiate(shapeObject);
			
			//Code for adding the objects to an array
			obj.SetActive(false);
			shapesQueue.Add(obj);
			
		}
		
	}
	
	void InvokeSpawn(){
		
		InvokeRepeating ("Spawn", spawnTime, spawnTime);
		
	}
	
	
	void Spawn () {
		
		for (int i = 0; i < shapesQueue.Count; i++) {
			
			if(!shapesQueue[i].activeInHierarchy)
			{
				//this transform posiiton is of the spawn object.
				DetermineSpawnNumber(shapesQueue[i]);
				//shapesQueue[i].transform.position = transform.position;
				
				shapesQueue[i].SetActive(true);
				vars.activeShapes++;
				//Put this code in BottomEdge script next to SetActive(false);
				//vars.activeShapes--;
				
				break;
			}
			
		}
		
	}
	
	//random number generator for spawn loc
	void DetermineSpawnNumber(GameObject shape){
		spawnNumber = Mathf.RoundToInt(Random.Range(1,7));
		SpawnLocation (spawnNumber, shape);
		
		
	}
	
	//picks spawn location
	void SpawnLocation (int number, GameObject shape){
		
		if (number == 1){
			shape.transform.position = spawn01.position;
		}
		else if (number == 2 ){
			shape.transform.position = spawn02.position;
		}
		else if (number == 3 ){
			shape.transform.position = spawn03.position;
		}
		else if (number == 4 ){
			shape.transform.position = spawn04.position;
		}
		else if (number == 5 ){
			shape.transform.position = spawn05.position;
		}
		else if (number > 5 ) {
			shape.transform.position = spawn06.position;
		} 
		
	}
}
