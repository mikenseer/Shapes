using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class ShapeSpawn : MonoBehaviour {

	private Variables vars;

	//spawnTime may be changed into multiple floats for the InvokeRepeating command
	private float spawnTime;
	public GameObject shapeObject;

	//The spawn locations
	public Transform spawn01,spawn02,spawn03,spawn04,spawn05,spawn06;
	private int spawnNumber;

	//tota number of shapes
	private int pooledAmount;

	[SerializeField]
	List<GameObject> shapesQueue= new List<GameObject>();

	private int activeShapes = 0;

	//May need to change this to Update() in order to allow variable changing mid game.
	void Start () {

		//Variables
		GameObject v1 = GameObject.FindGameObjectWithTag ("Variables");
		vars = v1.GetComponent<Variables> ();
		

		spawnTime = vars.spawnTimeV;
		pooledAmount = vars.pooledAmountV;

		//The Shapes queue pool	

		shapesQueue = new List<GameObject>();
		ShapeObjectPool (vars.pooledAmountV);


		//InvokeSpawn ();
		//Invoke ("InvokeSpawn", .2f);
	}

	void Update(){




		//If active shapes count > 0 then don't spawn shapes

		if (spawnTime != vars.spawnTimeV) {

			activeShapes = 0;
			CancelInvoke("Spawn");
			spawnTime = vars.spawnTimeV;
			//Wait for no more active shapes on screen
			for (int i = 5; i >0; i--){

				Debug.Log(activeShapes + " COUNT");

				if (CountActive() == 0)
				{

					Invoke("InvokeSpawn", .2f);
					break;
				}
				else if (CountActive() > 0)
				{
					//Debug.Log(activeShapes + " COUNT");

				}
				//else{
				//	return;
				//}

			}

		}




	}

	//keeps count of active objects.
	private int CountActive()
	{
		for (int i = 5; i > shapesQueue.Count; i--)
		{
			if (shapesQueue[i].activeSelf == true)
			{
				activeShapes += 1;

				
			}

			//else{
			//	activeShapes--;
			//}

		}
		return activeShapes;

	}

	void ShapeObjectPool(int pool){

		for (int i = 0; i < vars.pooledAmountV; i++) {
			
			GameObject obj = (GameObject)Instantiate(shapeObject);

			//Code for adding the objects to an array
			obj.SetActive(false);
			shapesQueue.Add(obj);
			
		}
	
	}

	void InvokeSpawn(){

		InvokeRepeating ("Spawn", spawnTime, spawnTime);

		}


	void Spawn () {
	
		for (int i = 0; i < shapesQueue.Count; i++) {

			if(!shapesQueue[i].activeInHierarchy)
			{
				//this transform posiiton is of the spawn object.
				DetermineSpawnNumber(shapesQueue[i]);
				//shapesQueue[i].transform.position = transform.position;

				shapesQueue[i].SetActive(true);
				break;
			}

		}

	}

	//random number generator for spawn loc
	void DetermineSpawnNumber(GameObject shape){
		spawnNumber = Mathf.RoundToInt(Random.Range(1,7));
		SpawnLocation (spawnNumber, shape);
		
		
	}

	//picks spawn location
	void SpawnLocation (int number, GameObject shape){
		
		if (number == 1){
			shape.transform.position = spawn01.position;
		}
		else if (number == 2 ){
			shape.transform.position = spawn02.position;
		}
		else if (number == 3 ){
			shape.transform.position = spawn03.position;
		}
		else if (number == 4 ){
			shape.transform.position = spawn04.position;
		}
		else if (number == 5 ){
			shape.transform.position = spawn05.position;
		}
		else if (number > 5 ) {
			shape.transform.position = spawn06.position;
		} 
		
	}
}

