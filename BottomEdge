using UnityEngine;
using System.Collections;

public class BottomEdge : MonoBehaviour {
	
	public Variables vars;
	public Timer timer;
	private powerCount;
	private scoreMultiplier;
	private bonusMultiplier;
	
	void Start(){
		GameObject v1 = GameObject.FindGameObjectWithTag ("Variables");
		vars = v1.GetComponent<Variables> ();
		
	}
	
	
	void OnTriggerEnter2D(Collider2D shape){
		powerCount = vars.powerCount;
		scoreMultiplier = vars.scoreMultiplier;
		bonusMultiplier = vars.bonusMultiplier;
		CheckIfShape(shape);
		
	}
	
	void CheckIfShape(Collider2D shape){
		if (shape.tag == "Shape") {
			LoopThroughChildren(shape.gameObject);
			
			shape.gameObject.SetActive (false);
			vars.activeShapes--;
		}
	}
	//Loops the shapeObject children through stuff
	void LoopThroughChildren(GameObject shape){
		
		foreach (Transform child in shape.transform) {
			DoThingsWithChildren(child.gameObject);
		}
		
	}
	//Checks if the shapeObject children (the shapes) are enabled
	void DoThingsWithChildren(GameObject shape){
		
		if (shape.renderer.enabled == false) {
			shape.renderer.enabled = true;
		} 
		else if (shape.renderer.enabled == true) {			
			ShapePassedPlayer(shape.tag);
		}
		
	}
	//Code to change multipliers and count shapes passing the player
	void ShapePassedPlayer (string shape){
		if (shape == "Shape01" || shape == "Shape02" || shape == "Shape03" || shape == "Shape04" || shape == "Shape05") {
			
			//Wile multiplier is in normal zone
			if (scoreMultiplier >= 0 && scoreMultiplier <= 10) {
				
				//vars.shapesLetPast++;
				//vars.playerLives--;
				
			
				if (powerCount == 0){						
					//vars.scoreMultiplier--;	
					//timer.time -= 1.5f;
					vars.multiCount = 0;
				}
				
				//Resets count for earning multiplier
			
			}
			
			//While under bonus, only loss is bonusMultiplier
			else if (bonusMultiplier > scoreMultiplier){
				vars.bonusMultiplier--;					
			}
			
			//Don't coun't shapes let past if user gets this low.
			//else if (scoreMultiplier <= 0) {
				
				//vars.playerLives--;
				//vars.shapesLetPast++;
			//}
			
			//Reduce power count always until back at 0.
			if (powerCount > 0){					
				vars.powerCount--;				
			}
		}
	}
	
}
